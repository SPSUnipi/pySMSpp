name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
  - cron: "0 6 * * 1,4"
  workflow_dispatch:

# Cancel any in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    # Test package build in matrix of OS and Python versions
    name: Test package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          # - "3.13"
        - "3.12"
        - "3.11"
        - "3.10"
          # - "3.9"
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
    env:
      MPLBACKEND: Agg  # https://github.com/orgs/community/discussions/26434
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for setuptools_scm

    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]

    - name: Test package
      run: |
        pytest

  test_with_smspp:
    # Test package build in matrix of OS and Python versions
    name: Test package with SMSpp
    needs:
    - test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
        - "3.12"
        os: ${{ ((github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && fromJson('["ubuntu", "macos", "windows"]')) || fromJson('["ubuntu", "macos", "windows"]') }}
    env:
      MPLBACKEND: Agg  # https://github.com/orgs/community/discussions/26434
      MAX_JOBS: 4  # Number of jobs in cmake compilation of SMS++ installation
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for setuptools_scm
    - name: Set up MSVC VS2022 (windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        vsversion: 2022

    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]

    - name: Install SMSpp (linux)
      if: runner.os == 'Linux'
      run: |
        cd $HOME
        git clone -b develop https://gitlab.com/smspp/smspp-project.git --recurse-submodules
        cd smspp-project
        chmod +x ./INSTALL.sh
        sudo ./INSTALL.sh --without-scip --without-gurobi
        echo "/opt/ibm/ILOG/CPLEX_Studio/cplex/bin/x86-64_linux" >> $GITHUB_PATH
        echo "/opt/smspp-project/bin" >> $GITHUB_PATH
        echo "/opt/smspp-project/build/InvestmentBlock/test" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=/opt/smspp-project/lib:/opt/ibm/ILOG/CPLEX_Studio/cplex/lib/x86-64_linux:$LD_LIBRARY_PATH" >> $GITHUB_ENV

    - name: Install SMSpp (macOS)
      if: runner.os == 'macOS'
      run: |
        cd $HOME
        git clone -b develop https://gitlab.com/smspp/smspp-project.git --recurse-submodules
        cd smspp-project
        chmod +x ./INSTALL.sh
        ./INSTALL.sh --without-scip --without-gurobi --without-cplex
        echo "$HOME/smspp-project/bin" >> $GITHUB_PATH
        echo "$HOME/smspp-project/build/InvestmentBlock/test" >> $GITHUB_PATH
        echo "DYLD_LIBRARY_PATH=$HOME/smspp-project/lib:$HOME/HiGHS/lib:$HOME/StOpt/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV

    - name: Install SMSpp (windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd C:\
        git clone -b develop https://gitlab.com/smspp/smspp-project.git --recurse-submodules
        cd smspp-project
        .\INSTALL.ps1 -withoutScip -withoutGurobi -withoutCplex -nonInteractive
        echo "C:\smspp-project\Release\bin;C:\smspp-project\build\Release\InvestmentBlock\test\Release;C:\HiGHS\bin;C:\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Print environment variables (Not Windows)
      if: runner.os != 'Windows'
      run: |
        echo "PATH: $PATH"

    - name: Print environment variables (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        echo "PATH: $env:PATH"

    - name: Test package with SMSpp
      run: |
        pytest --force-smspp
